package com.test;

public class SubClass extends SuperClass {

	// 构造器的原则：
	// 1.子类不继承父类构造器，直接调用（必须要有）
	// 2.父类构造器有多个，对无参的默认会自动调用，有参则是根据自己需求决定是否调用。
	// 调用规则：如果不更改，子类的无参构造器调用父类的无参构造器，有参调用有参
	// 子类有参构造器调用父类有参构造器
	// 如果，人为的在子类的无参构造器中调用父类的有参构造器，则
	// 父类的无参构造器只能退居到子类构造器有参构造器中
	// 3.父类的无参构造器无论怎么调用，是自动调用的，无需新增代码。
	// 父类的有参构造器，是要用super来进行手动的调用的
	
	private int n;

//	SubClass() {
//		// 在子类初始化之前自动继承父类的构造方法，默认是子类无参继承父类无参
//		// 子类无参构造
//		System.out.println("SubClass");
//	}

	SubClass(int n) {
		// 在子类初始化之前首先调用父类的构造方法，默认是子有参掉父有参
		super(300);//无参时默认调用的，有参是自己需要时调用
		// 子类有参构造
		System.out.println("SubClass(int(n)  " + n);
		this.n = n;
	}
	
	// 下面是人为改变了对付类构造方法的继承关系（不推荐）
	//  SubClass2
	
	
}
